var collections = require("./collections");
/**
 * find([1,2,3,4,5], (x) => x === 3);
 *
 * @param {Array<T>} list
 * @param {(x: T) => boolean} predicate
 * @param {Object} thisArg?
 * @returns {T?}
 */
function find(list, predicate, thisArg) {
    var length = list.length;
    var value;
    for (var i = 0; i < length; i++) {
        value = list[i];
        if (predicate.call(thisArg, value, i, list)) {
            return value;
        }
    }
    return undefined;
}
exports.find = find;
/**
 * Whether the list includes the given element
 * @param {Array<T>} list
 * @param element {T}
 * @returns {boolean} True iff the element passed in equals() any element
 *     that can be iterated over.
 */
function includes(list, element) {
    return -1 !== list.indexOf(element);
}
exports.includes = includes;
/**
 * Whether the list is empty
 * @param {Array<T>} list
 * @returns {boolean} True iff the iterable has no elements to iterate over.
 */
function isEmpty(list) {
    return list.length === 0;
}
exports.isEmpty = isEmpty;
/**
 * Dedupes a list of lists, choosing the first occurrence of each element from
 * the first list it appears in
 */
function dedupeLists(listOfLists, hash) {
    var all = {};
    var resultList = [];
    listOfLists.forEach(function (list) {
        var results = [];
        list.forEach(function (obj) {
            var key = hash(obj);
            if (collections.get(all, key).isEmpty()) {
                all[key] = true;
                results.push(obj);
            }
        });
        resultList.push(results);
    });
    return resultList;
}
exports.dedupeLists = dedupeLists;
