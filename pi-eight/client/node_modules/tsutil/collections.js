var Optional = require("./optional");
/**
 * Gets a key from a map
 * @param  {Map<T>}      map The map to retrieve the key
 * @param  {string}      key The key for the map
 * @return {Optional<T>}     The optional value of the map
 */
function get(map, key) {
    return new Optional(map[key]);
}
exports.get = get;
/**
 * Iterates through a map
 * @param {Map<T>}           map      The map to iterate through
 * @param {Iterator<T, Any>} iterator The iteration callback
 */
function forEach(map, iterator) {
    var keys = Object.keys(map);
    var length = keys.length;
    for (var i = 0; i < length; i++) {
        iterator(map[keys[i]], keys[i], map);
    }
}
exports.forEach = forEach;
/**
 * Whether every key, value pair in the map matches
 * @param  {Map<T>}               map    The map to iterate through
 * @param  {Iterator<T, boolean>} filter The filter callback
 * @return {boolean}                     Whether every key, value pair matches
 */
function every(map, filter) {
    var everyMatch = true;
    forEach(map, function (value, key, map) {
        everyMatch = everyMatch && filter(value, key, map);
    });
    return everyMatch;
}
exports.every = every;
/**
 * Whether any key, value pair in the map matches
 * @param  {Map<T>}               map    The map to iterate through
 * @param  {Iterator<T, boolean>} filter The filter callback
 * @return {boolean}                     Whether any key, value pair matches
 */
function some(map, filter) {
    var someMatch = false;
    forEach(map, function (value, key, map) {
        someMatch = someMatch || filter(value, key, map);
    });
    return someMatch;
}
exports.some = some;
/**
 * Filters the map
 * @param  {Map<T>}               map    The map to iterate through
 * @param  {Iterator<T, boolean>} filter The filter callback
 * @return {Map<T>}                      The filtered map
 */
function filter(map, filter) {
    var filteredMap = {};
    forEach(map, function (value, key, map) {
        if (filter(value, key, map)) {
            filteredMap[key] = value;
        }
    });
    return filteredMap;
}
exports.filter = filter;
/**
 * Transfroms the map
 * @param  {Map<T>}         map       The map to iterate through
 * @param  {Iterator<T, K>} transform The transform callback
 * @return {Map<K>}                   The transformed map
 */
function map(map, transform) {
    var transformedMap = {};
    forEach(map, function (value, key, map) {
        transformedMap[key] = transform(value, key, map);
    });
    return transformedMap;
}
exports.map = map;
/**
 * Reduces the map using the first key as the initial value
 * @param  {Map<T>}        map     The map to iterate through
 * @param  {Reducer<T, T>} reducer The reducer callback
 * @return {T}                     The reduced value
 */
function fold(map, reducer) {
    var result = null;
    forEach(map, function (value, key, map) {
        if (result === null) {
            result = value;
        }
        else {
            result = reducer(result, value, key, map);
        }
    });
    return result;
}
exports.fold = fold;
/**
 * Reduces the map using the initial value passed in
 * @param  {Map<T>}        map          The map to iterate through
 * @param  {Reducer<T, K>} reducer      The reducer callback
 * @param  {K}             initialValue The starting value
 * @return {K}                          The reduced value
 */
function reduce(map, reducer, initialValue) {
    var result = initialValue;
    forEach(map, function (value, key, map) {
        result = reducer(result, value, key, map);
    });
    return result;
}
exports.reduce = reduce;
