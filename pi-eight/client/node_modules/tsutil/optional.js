/**
 * The Optional class is used to represent the possible existence of a value
 */
var Optional = (function () {
    /**
     * Create an option from the value
     * @param value
     * @returns {*}
     */
    function Optional(value) {
        if (!Optional._isEmpty(Optional.NONE) && Optional._isEmpty(value)) {
            return Optional.NONE;
        }
        this._value = value;
        return this;
    }
    /**
     * Flattens an array of optionals by filtering out the empty optionals
     * @param optionals The list of optionals to flatten
     * @returns {T{]}
     */
    Optional.flatten = function (optionals) {
        return optionals.reduce(function (acc, elem) {
            elem.forEach(function (value) {
                acc.push(value);
            });
            return acc;
        }, []);
    };
    Optional._isEmpty = function (value) {
        return typeof value === "undefined" || value === null;
    };
    /**
     * Whether or not the option is empty
     * @returns {boolean}
     */
    Optional.prototype.isEmpty = function () {
        return Optional._isEmpty(this._value);
    };
    /**
     * Whether or not the option has a value
     * @returns {boolean}
     */
    Optional.prototype.isNonEmpty = function () {
        return !this.isEmpty();
    };
    /**
     * Return an option based on whether or not the value matches the filter
     * @param filterer A filter function to check the value against
     * @returns {*}
     */
    Optional.prototype.filter = function (filterer) {
        if (this.isNonEmpty() && filterer(this._value)) {
            return this;
        }
        return Optional.NONE;
    };
    /**
     * A side effect callback for accessing the value that will only be called if there is a value
     * @param callback The callback for the value
     */
    Optional.prototype.forEach = function (callback) {
        if (this.isNonEmpty()) {
            callback(this._value);
        }
    };
    /**
     * Map an option to a new option
     * @param mapper A map function to create a new value
     * @returns {*}
     */
    Optional.prototype.map = function (mapper) {
        if (this.isNonEmpty()) {
            return new Optional(mapper(this._value));
        }
        return Optional.NONE;
    };
    /**
     * Map an option to a new option and flatten options
     * @param mapper A map function that returns an option
     * @returns {*}
     */
    Optional.prototype.flatMap = function (mapper) {
        if (this.isNonEmpty()) {
            return mapper(this._value);
        }
        return Optional.NONE;
    };
    /**
     * Returns the value if it is defined, otherwise returns null.
     * Use of this method is discouraged. Prefer using #forEach(), #flatMap(),
     * #map(), #getOrElse(), etc.
     * @returns {T}
     */
    Optional.prototype.getOrNull = function () {
        return this._value;
    };
    /**
     * Retrieves the value and throws an error if the option is empty
     * @returns {T}
     */
    Optional.prototype.getOrThrow = function () {
        if (this.isEmpty()) {
            throw new Error("Called getOrThrow on an empty Optional");
        }
        return this._value;
    };
    /**
     * Retrieves the value and falls back to another value
     * @param other The fallback accessor
     * @returns {*}
     */
    Optional.prototype.getOrElse = function (other) {
        if (this.isNonEmpty()) {
            return this._value;
        }
        return other();
    };
    /**
     * Retrieves the value and falls back to another option
     * @param other The fallback option accessor
     * @returns {*}
     */
    Optional.prototype.orElse = function (other) {
        if (this.isNonEmpty()) {
            return this;
        }
        return other();
    };
    /**
     * Returns a new array containing just the value if it is defined,
     * or an empty array if the value is not defined.
     * @returns {*}
     */
    Optional.prototype.toArray = function () {
        if (this.isNonEmpty()) {
            return [this._value];
        }
        else {
            return [];
        }
    };
    /**
     * NONE is a global singleton to represent the empty option
     * @type {Optional<any>}
     */
    Optional.NONE = new Optional(null);
    return Optional;
})();
module.exports = Optional;
